	mi import json
import os
import boto3

# Create the SNS client outside the handler for connection reuse.
sns_client = boto3.client('sns')

# Retrieve configuration from environment variables.
SNS_TOPIC_ARN = os.environ.get('SNS_TOPIC_ARN')  # Your SNS Topic ARN.
BUSINESS_ID = os.environ.get('BUSINESS_ID')        # Your Business ID.

def lambda_handler(event, context):
    """
    AWS Lambda function that processes an EventBridge event,
    enriches the payload with a business ID, and publishes a message
    to SNS with a subject line based on the server's state.
    """
    # Log the received event for debugging.
    print("Received event:", json.dumps(event, indent=2))
    
    # Copy the event to modify it.
    formatted_message = event.copy()
    
    # Enrich the message with the business id.
    formatted_message['business_id'] = BUSINESS_ID
    
    # Extract instance id and state from event details, if available.
    # It's assumed that the EventBridge event includes a 'detail' key.
    detail = event.get("detail", {})
    instance_id = detail.get("instance-id", "unknown-instance")
    state = detail.get("state", "").lower()  # e.g., "stopping", "stopped", or "down"
    
    # Determine the message subject based on the state.
    if state in ["stopping", "stopped"]:
        # For 'stopping' or 'stopped', set the subject accordingly.
        subject = f"Server {state}"
    elif state == "down":
        # For 'down', include the EC2 instance id in the subject.
        subject = f"Server down - {instance_id}"
    else:
        # Default subject if state is not recognized.
        subject = f"Server notification - {instance_id}"
    
    # Convert the enriched message to a JSON string.
    message_str = json.dumps(formatted_message)
    
    try:
        # Publish the message to the SNS topic.
        response = sns_client.publish(
            TopicArn=SNS_TOPIC_ARN,
            Message=message_str,
            Subject=subject
        )
        print("SNS Publish Response:", json.dumps(response, indent=2))
    except Exception as e:
        print("Error publishing to SNS:", str(e))
        raise e

    return {
        'statusCode': 200,
        'body': json.dumps('Message sent to SNS successfully!')
    }



import json
import boto3
import os

sns_client = boto3.client("sns")
cloudwatch_client = boto3.client("cloudwatch")

SNS_TOPIC_ARN = os.getenv("SNS_TOPIC_ARN")  # Set this in Lambda environment variables
ALARM_DESCRIPTION = "AVERS1234565"  # Hardcoded for BigPanda filtering

def lambda_handler(event, context):
    try:
        # Clone the original event without modification
        enriched_event = event.copy()
        
        # Inject the AlarmDescription field
        if "detail" in enriched_event:
            enriched_event["detail"]["alarmDescription"] = ALARM_DESCRIPTION

        # Publish the enriched message to SNS
        response = sns_client.publish(
            TopicArn=SNS_TOPIC_ARN,
            Message=json.dumps(enriched_event),
            Subject="CloudWatch Alarm Notification"
        )

        print("SNS Notification Sent:", response)
        
        return {
            "statusCode": 200,
            "body": json.dumps({"message": "AlarmDescription Injected and SNS Notification Sent"})
        }
    
    except Exception as e:
        print("Error:", str(e))
        return {
            "statusCode": 500,
            "body": json.dumps({"error": str(e)})
        }







import json
import os
import boto3

sns_client = boto3.client('sns')

# Get SNS Topic ARN from environment variables
SNS_TOPIC_ARN = os.environ.get('SNS_TOPIC_ARN')

def lambda_handler(event, context):
    print("Received event:", json.dumps(event, indent=2))

    # Extract Business ID from AlarmDescription (from EventBridge)
    business_id = event.get("AlarmDescription", "unknown-business")

    # Extract instance details (from EventBridge "detail" section)
    detail = event.get("detail", {})
    instance_id = detail.get("instance-id", "unknown-instance")
    state = detail.get("state", "").lower()

    # Determine notification subject
    if state in ["stopping", "stopped"]:
        subject = f"Server {state}"
    elif state == "down":
        subject = f"Server down - {instance_id}"
    else:
        subject = f"Server notification - {instance_id}"

    # Format message exactly as BigPanda expects
    sns_message = {
        "status": "critical" if state == "down" else "warning",
        "incident_identifier": f"server-{state}-{instance_id}",
        "message": subject,
        "host": instance_id,  # Required field for BigPanda
        "service": "AWS EC2",
        "application": "AWS Monitoring",
        "device": business_id
    }

    # Publish to SNS (which will forward it to BigPanda)
    try:
        sns_client.publish(
            TopicArn=SNS_TOPIC_ARN,
            Message=json.dumps(sns_message),  # Send the formatted JSON
            Subject=subject
        )
    except Exception as e:
        print("Error publishing to SNS:", str(e))

    return {
        'statusCode': 200,
        'body': json.dumps('Notification sent successfully!')
    }







import json
import os
import boto3

sns_client = boto3.client('sns')

# Get SNS Topic ARN & Business ID from environment variables
SNS_TOPIC_ARN = os.environ.get('SNS_TOPIC_ARN')
BUSINESS_ID = os.environ.get('BUSINESS_ID', 'default-business-id')  # Default if env variable is missing

def lambda_handler(event, context):
    print("Received event:", json.dumps(event, indent=2))

    # Clone the original event so we don't modify the reference
    enriched_event = event.copy()

    # Inject BUSINESS_ID into the `detail` section as `alarmDescription`
    if "detail" in enriched_event:
        enriched_event["detail"]["alarmDescription"] = BUSINESS_ID  # Inject Business ID

    # Extract instance details from the event
    detail = enriched_event.get("detail", {})
    instance_id = detail.get("instance-id", "unknown-instance")
    state = detail.get("state", "").lower()
    region = event.get("region", "unknown-region")
    account = event.get("account", "unknown-account")

    # Determine notification subject
    if state in ["stopping", "stopped"]:
        subject = f"Server {state}"
    elif state == "down":
        subject = f"Server down - {instance_id}"
    else:
        subject = f"Server notification - {instance_id}"

    # **Format the message as JSON for SNS & BigPanda**
    sns_message = {
        "status": "critical" if state == "down" else "warning",
        "incident_identifier": f"server-{state}-{instance_id}",
        "message": subject,
        "host": instance_id,  # Required by BigPanda
        "service": "AWS EC2",
        "application": "AWS Monitoring",
        "device": BUSINESS_ID,  # Injected Business ID from environment variable
        "region": region,
        "account": account
    }

    # Publish to SNS (which will forward it to BigPanda)
    try:
        response = sns_client.publish(
            TopicArn=SNS_TOPIC_ARN,
            Message=json.dumps(sns_message),  # Sends JSON-formatted message
            Subject=subject
        )
        print("SNS Notification Sent:", response)
    except Exception as e:
        print("Error publishing to SNS:", str(e))
        return {
            'statusCode': 500,
            'body': json.dumps({"error": str(e)})
        }

    return {
        'statusCode': 200,
        'body': json.dumps({"message": "Business ID injected and SNS Notification Sent"})
    }








import json
import boto3
import os

sns_client = boto3.client('sns')

SNS_TOPIC_ARN = os.environ.get('SNS_TOPIC_ARN')
ALARM_DESCRIPTION = os.environ.get('ALARM_DESCRIPTION')

def lambda_handler(event, context):
    try:
        enriched_event = event.copy()

        # Inject the AlarmDescription field
        if "detail" in enriched_event:
            enriched_event["detail"]["alarmDescription"] = ALARM_DESCRIPTION

            # Ensure at least one primary property exists
            if "host" not in enriched_event["detail"] and \
               "service" not in enriched_event["detail"] and \
               "application" not in enriched_event["detail"] and \
               "device" not in enriched_event["detail"]:
                enriched_event["detail"]["service"] = "default-service"

        instance_id = enriched_event.get("detail", {}).get("instance-id", "unknown-instance")
        enriched_event["detail"]["host"] = instance_id  # Assign instance_id as host if missing

        # Publish the enriched message to SNS
        response = sns_client.publish(
            TopicArn=SNS_TOPIC_ARN,
            Message=json.dumps(enriched_event),
            Subject="EventBridge Alarm Notification"
        )

        print("SNS Notification Sent:", response)

        return {
            "statusCode": 200,
            "body": json.dumps({"message": "AlarmDescription Injected and SNS Notification Sent"})
        }

    except Exception as e:
        print("Error:", str(e))
        return {
            "statusCode": 500,
            "body": json.dumps({"error": str(e)})
        }





import json
import boto3
import os

sns_client = boto3.client('sns')

SNS_TOPIC_ARN = os.environ.get('SNS_TOPIC_ARN')
ALARM_DESCRIPTION = os.environ.get('ALARM_DESCRIPTION')

def lambda_handler(event, context):
    try:
        enriched_event = event.copy()

        # Inject the AlarmDescription field
        if "detail" in enriched_event:
            enriched_event["alarmDescription"] = ALARM_DESCRIPTION

            # Ensure at least one primary property exists at the top level
            if "host" not in enriched_event and "service" not in enriched_event and \
               "application" not in enriched_event and "device" not in enriched_event:
                enriched_event["service"] = "default-service"

            instance_id = enriched_event["detail"].get("instance-id", "unknown-instance")
            enriched_event["host"] = instance_id  # Move host to the top level

        # Transform event to match BigPanda structure
        transformed_event = {
            "alerts": [enriched_event]
        }

        # Print for debugging
        print("Final Payload:", json.dumps(transformed_event, indent=2))

        # Publish to SNS
        response = sns_client.publish(
            TopicArn=SNS_TOPIC_ARN,
            Message=json.dumps(transformed_event),
            Subject="EventBridge Alarm Notification"
        )

        print("SNS Notification Sent:", response)

        return {
            "statusCode": 200,
            "body": json.dumps({"message": "AlarmDescription Injected and SNS Notification Sent"})
        }

    except Exception as e:
        print("Error:", str(e))
        return {
            "statusCode": 500,
            "body": json.dumps({"error": str(e)})
        }




import json
import boto3
import os

sns_client = boto3.client('sns')

SNS_TOPIC_ARN = os.environ.get('SNS_TOPIC_ARN')
ALARM_DESCRIPTION = os.environ.get('ALARM_DESCRIPTION')

def lambda_handler(event, context):
    try:
        # Copy the incoming event so we can safely modify it
        enriched_event = event.copy()

        # 1) Inject 'alarmDescription' at the top level
        if "detail" in enriched_event:
            enriched_event["alarmDescription"] = ALARM_DESCRIPTION

            # 2) Ensure at least one of [host, service, application, device] at top level
            if not any(key in enriched_event for key in ["host", "service", "application", "device"]):
                enriched_event["service"] = "default-service"

            # 3) Use the instance ID as the 'host'
            instance_id = enriched_event["detail"].get("instance-id", "unknown-instance")
            enriched_event["host"] = instance_id

        # 4) Print the *exact* final payload to CloudWatch for debugging
        #    This is what will be sent to SNS -> BigPanda
        print("=== Final Enriched Payload ===")
        print(json.dumps(enriched_event, indent=2))

        # 5) Publish this payload to SNS
        response = sns_client.publish(
            TopicArn=SNS_TOPIC_ARN,
            Message=json.dumps(enriched_event),
            Subject="EventBridge Alarm Notification"
        )

        # Print the SNS publish response for further debug (MessageId, etc.)
        print("=== SNS Publish Response ===")
        print(json.dumps(response, indent=2))

        return {
            "statusCode": 200,
            "body": json.dumps({
                "message": "AlarmDescription injected. Payload published to SNS."
            })
        }

    except Exception as e:
        print("Error:", str(e))
        return {
            "statusCode": 500,
            "body": json.dumps({"error": str(e)})
        }








import json
import boto3
import os

sns_client = boto3.client('sns')

SNS_TOPIC_ARN = os.environ.get('SNS_TOPIC_ARN')
ALARM_DESCRIPTION = os.environ.get('ALARM_DESCRIPTION')

def lambda_handler(event, context):
    try:
        # Copy the incoming event so we can safely modify it
        enriched_event = event.copy()

        # 1) Inject 'alarmDescription' at the top level
        if "detail" in enriched_event:
            enriched_event["alarmDescription"] = ALARM_DESCRIPTION

            # 2) Ensure at least one of [host, service, application, device] at top level
            if not any(key in enriched_event for key in ["host", "service", "application", "device"]):
                enriched_event["service"] = "default-service"

            # 3) Use the instance ID as the 'host'
            instance_id = enriched_event["detail"].get("instance-id", "unknown-instance")
            enriched_event["host"] = instance_id

        # 4) Print the *exact* final payload to CloudWatch for debugging
        #    This is what will be sent to SNS -> BigPanda
        print("=== Final Enriched Payload ===")
        print(json.dumps(enriched_event, indent=2))

        # 5) Publish this payload to SNS
        response = sns_client.publish(
            TopicArn=SNS_TOPIC_ARN,
            Message=json.dumps(enriched_event),
            Subject="EventBridge Alarm Notification"
        )

        # Print the SNS publish response for further debug (MessageId, etc.)
        print("=== SNS Publish Response ===")
        print(json.dumps(response, indent=2))

        return {
            "statusCode": 200,
            "body": json.dumps({
                "message": "AlarmDescription injected. Payload published to SNS."
            })
        }

    except Exception as e:
        print("Error:", str(e))
        return {
            "statusCode": 500,
            "body": json.dumps({"error": str(e)})
        }




